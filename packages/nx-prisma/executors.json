{
  "executors": {
    "deploy": {
      "implementation": "./dist/executors/deploy/executor",
      "schema": "./dist/executors/deploy/schema.json",
      "description": "The migrate deploy command applies all pending migrations, and creates the database if it does not exist. Primarily used in non-development environments."
    },
    "format": {
      "implementation": "./dist/executors/format/executor",
      "schema": "./dist/executors/format/schema.json",
      "description": "Formats the Prisma Schema Language of the Prisma schema file."
    },
    "generate": {
      "implementation": "./dist/executors/generate/executor",
      "schema": "./dist/executors/generate/schema.json",
      "description": "The generate command generates assets like Prisma Client based on the generator and data model blocks defined in your schema.prisma file."
    },
    "migrate": {
      "implementation": "./dist/executors/migrate/executor",
      "schema": "./dist/executors/migrate/schema.json",
      "description": "The migrate dev command updates your database using migrations during development and creates the database if it does not exist."
    },
    "pull": {
      "implementation": "./dist/executors/pull/executor",
      "schema": "./dist/executors/pull/schema.json",
      "description": "The db pull command connects to your database and adds Prisma models to your Prisma schema that reflect the current database schema."
    },
    "push": {
      "implementation": "./dist/executors/push/executor",
      "schema": "./dist/executors/push/schema.json",
      "description": "The db push command pushes the state of your Prisma schema file to the database without using migrations. It creates the database if the database does not exist."
    },
    "reset": {
      "implementation": "./dist/executors/reset/executor",
      "schema": "./dist/executors/reset/schema.json",
      "description": "This command deletes and recreates the database, or performs a 'soft reset' by removing all data, tables, indexes, and other artifacts."
    },
    "resolve": {
      "implementation": "./dist/executors/resolve/executor",
      "schema": "./dist/executors/resolve/schema.json",
      "description": "The migrate resolve command allows you to solve migration history issues in production by marking a failed migration as already applied (supports baselining) or rolled back."
    },
    "seed": {
      "implementation": "./dist/executors/seed/executor",
      "schema": "./dist/executors/seed/schema.json",
      "description": "Seed your database."
    },
    "status": {
      "implementation": "./dist/executors/status/executor",
      "schema": "./dist/executors/status/schema.json",
      "description": "The prisma migrate status command looks up the migrations in migrations folder and the entries in the _prisma_migrations table and compiles information about the state of the migrations in your database."
    },
    "studio": {
      "implementation": "./dist/executors/studio/executor",
      "schema": "./dist/executors/studio/schema.json",
      "description": "The studio command allows you to interact with and manage your data interactively. It does this by starting a local web server with a web app configured with your project's data schema and records."
    },
    "validate": {
      "implementation": "./dist/executors/validate/executor",
      "schema": "./dist/executors/validate/schema.json",
      "description": "Validates the Prisma Schema Language of the Prisma schema file."
    }
  }
}
